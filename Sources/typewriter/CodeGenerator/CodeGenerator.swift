//
//  CodeGenerator.swift
//  typewriter
//
//  Created by mrriddler on 2017/8/25.
//  Copyright © 2017年 typewriter. All rights reserved.
//

import Foundation

prefix operator -->
prefix func --> (strArr: [String]) -> String {
    return strArr.flatMap{ $0.components(separatedBy: "\n").map{"    " + $0}}
        .joined(separator: "\n")
}
prefix func --> (stmt: () -> [String]) -> String {
    return -->stmt()
}

func plus(left: [String]?, right: [String]?) -> [String]? {
    switch (left, right) {
    case (.none, .none):
        return nil
    case (.some(let leftWrapped), .none):
        return Array(leftWrapped)
    case (.none, .some(let rightWrapped)):
        return Array(rightWrapped)
    case (.some(let leftWrapped), .some(let rightWrapped)):
        return Array(leftWrapped + rightWrapped)
    }
}

protocol RepresentComposite {
    var component: [RepresentComposite]? { get set }
    func represent() -> [String]
}

protocol CodeGenerator {
    static func generate(ir: IR) -> [FileRepresent]
}

protocol FileRepresent {
    var representName: String { mutating get}
    func representInfo() -> String
    func representEntity() -> String
}

extension FileRepresent {
    func representInfo() -> String {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy/MM/dd"
        let dateStr = dateFormatter.string(from: Date())
        
        var copy = self
        
        return ["//",
                "//  " + copy.representName,
                "//  Autogenerated by typewriter",
                "//",
                "//  Generation Date On " + dateStr,
                "//  Version: " + FrameworkVersion
            ].joined(separator: "\n")
    }
}
